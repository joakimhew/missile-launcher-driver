// Code generated by protoc-gen-go. DO NOT EDIT.
// source: driver.proto

package driver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommandRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandRequest) Reset()         { *m = CommandRequest{} }
func (m *CommandRequest) String() string { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()    {}
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_521003751d596b5e, []int{0}
}

func (m *CommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandRequest.Unmarshal(m, b)
}
func (m *CommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandRequest.Marshal(b, m, deterministic)
}
func (m *CommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequest.Merge(m, src)
}
func (m *CommandRequest) XXX_Size() int {
	return xxx_messageInfo_CommandRequest.Size(m)
}
func (m *CommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequest proto.InternalMessageInfo

type CommandReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandReply) Reset()         { *m = CommandReply{} }
func (m *CommandReply) String() string { return proto.CompactTextString(m) }
func (*CommandReply) ProtoMessage()    {}
func (*CommandReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_521003751d596b5e, []int{1}
}

func (m *CommandReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandReply.Unmarshal(m, b)
}
func (m *CommandReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandReply.Marshal(b, m, deterministic)
}
func (m *CommandReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandReply.Merge(m, src)
}
func (m *CommandReply) XXX_Size() int {
	return xxx_messageInfo_CommandReply.Size(m)
}
func (m *CommandReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandReply.DiscardUnknown(m)
}

var xxx_messageInfo_CommandReply proto.InternalMessageInfo

func (m *CommandReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*CommandRequest)(nil), "driver.CommandRequest")
	proto.RegisterType((*CommandReply)(nil), "driver.CommandReply")
}

func init() {
	proto.RegisterFile("driver.proto", fileDescriptor_521003751d596b5e)
}

var fileDescriptor_521003751d596b5e = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x29, 0xca, 0x2c,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x04, 0xb8, 0xf8,
	0x9c, 0xf3, 0x73, 0x73, 0x13, 0xf3, 0x52, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x94, 0x34,
	0xb8, 0x78, 0xe0, 0x22, 0x05, 0x39, 0x95, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9, 0xc5, 0xc5, 0x89,
	0xe9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0xd1, 0x51, 0x16, 0x2e, 0x36,
	0x17, 0xb0, 0x31, 0x42, 0x66, 0x5c, 0x2c, 0x3e, 0xa9, 0x69, 0x25, 0x42, 0x62, 0x7a, 0x50, 0x5b,
	0x50, 0x0d, 0x95, 0x12, 0xc1, 0x10, 0x2f, 0xc8, 0xa9, 0x54, 0x62, 0x10, 0x32, 0xe1, 0x62, 0x0a,
	0x2d, 0x20, 0x59, 0x97, 0x39, 0x17, 0x6b, 0x50, 0x66, 0x7a, 0x06, 0xe9, 0xd6, 0x99, 0x71, 0xb1,
	0xb8, 0xe4, 0x97, 0xe7, 0x91, 0xac, 0xcf, 0x82, 0x8b, 0x2d, 0xb4, 0x80, 0x2c, 0x0f, 0x5a, 0x71,
	0x71, 0x80, 0x6c, 0x24, 0x4b, 0xaf, 0x25, 0x17, 0x7b, 0x68, 0x01, 0x79, 0x1e, 0xb5, 0xe6, 0xe2,
	0x04, 0x59, 0x4b, 0x76, 0x28, 0x05, 0x97, 0xe4, 0x17, 0x90, 0xa3, 0xcf, 0x2d, 0xb3, 0x28, 0x95,
	0x54, 0x7d, 0x49, 0x6c, 0xe0, 0x24, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x9b, 0x91,
	0x71, 0xa2, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DriverClient is the client API for Driver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DriverClient interface {
	Left(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Up(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Right(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Down(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error)
	UpLeft(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error)
	DownLeft(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error)
	UpRight(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error)
	DownRight(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Stop(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Fire(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error)
}

type driverClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverClient(cc grpc.ClientConnInterface) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) Left(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/driver.Driver/Left", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Up(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/driver.Driver/Up", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Right(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/driver.Driver/Right", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Down(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/driver.Driver/Down", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) UpLeft(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/driver.Driver/UpLeft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) DownLeft(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/driver.Driver/DownLeft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) UpRight(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/driver.Driver/UpRight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) DownRight(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/driver.Driver/DownRight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Stop(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/driver.Driver/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Fire(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/driver.Driver/Fire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServer is the server API for Driver service.
type DriverServer interface {
	Left(context.Context, *CommandRequest) (*CommandReply, error)
	Up(context.Context, *CommandRequest) (*CommandReply, error)
	Right(context.Context, *CommandRequest) (*CommandReply, error)
	Down(context.Context, *CommandRequest) (*CommandReply, error)
	UpLeft(context.Context, *CommandRequest) (*CommandReply, error)
	DownLeft(context.Context, *CommandRequest) (*CommandReply, error)
	UpRight(context.Context, *CommandRequest) (*CommandReply, error)
	DownRight(context.Context, *CommandRequest) (*CommandReply, error)
	Stop(context.Context, *CommandRequest) (*CommandReply, error)
	Fire(context.Context, *CommandRequest) (*CommandReply, error)
}

// UnimplementedDriverServer can be embedded to have forward compatible implementations.
type UnimplementedDriverServer struct {
}

func (*UnimplementedDriverServer) Left(ctx context.Context, req *CommandRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Left not implemented")
}
func (*UnimplementedDriverServer) Up(ctx context.Context, req *CommandRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Up not implemented")
}
func (*UnimplementedDriverServer) Right(ctx context.Context, req *CommandRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Right not implemented")
}
func (*UnimplementedDriverServer) Down(ctx context.Context, req *CommandRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Down not implemented")
}
func (*UnimplementedDriverServer) UpLeft(ctx context.Context, req *CommandRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpLeft not implemented")
}
func (*UnimplementedDriverServer) DownLeft(ctx context.Context, req *CommandRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownLeft not implemented")
}
func (*UnimplementedDriverServer) UpRight(ctx context.Context, req *CommandRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpRight not implemented")
}
func (*UnimplementedDriverServer) DownRight(ctx context.Context, req *CommandRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownRight not implemented")
}
func (*UnimplementedDriverServer) Stop(ctx context.Context, req *CommandRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedDriverServer) Fire(ctx context.Context, req *CommandRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fire not implemented")
}

func RegisterDriverServer(s *grpc.Server, srv DriverServer) {
	s.RegisterService(&_Driver_serviceDesc, srv)
}

func _Driver_Left_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Left(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.Driver/Left",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Left(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Up_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Up(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.Driver/Up",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Up(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Right_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Right(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.Driver/Right",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Right(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Down_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Down(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.Driver/Down",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Down(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_UpLeft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).UpLeft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.Driver/UpLeft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).UpLeft(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_DownLeft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).DownLeft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.Driver/DownLeft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).DownLeft(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_UpRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).UpRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.Driver/UpRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).UpRight(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_DownRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).DownRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.Driver/DownRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).DownRight(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.Driver/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Stop(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Fire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Fire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/driver.Driver/Fire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Fire(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Driver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "driver.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Left",
			Handler:    _Driver_Left_Handler,
		},
		{
			MethodName: "Up",
			Handler:    _Driver_Up_Handler,
		},
		{
			MethodName: "Right",
			Handler:    _Driver_Right_Handler,
		},
		{
			MethodName: "Down",
			Handler:    _Driver_Down_Handler,
		},
		{
			MethodName: "UpLeft",
			Handler:    _Driver_UpLeft_Handler,
		},
		{
			MethodName: "DownLeft",
			Handler:    _Driver_DownLeft_Handler,
		},
		{
			MethodName: "UpRight",
			Handler:    _Driver_UpRight_Handler,
		},
		{
			MethodName: "DownRight",
			Handler:    _Driver_DownRight_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Driver_Stop_Handler,
		},
		{
			MethodName: "Fire",
			Handler:    _Driver_Fire_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver.proto",
}
